[package]
name = "concordium-std"
version = "10.1.0"
authors = ["Concordium <developers@concordium.com>"]
edition = "2021"
rust-version = "1.73"
license = "MPL-2.0"
description = "A standard library for writing smart contracts for the Concordium blockchain in Rust."
homepage = "https://github.com/Concordium/concordium-rust-smart-contracts/"
repository = "https://github.com/Concordium/concordium-rust-smart-contracts/"
readme = "./README.md"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
[dependencies]
sha2 = { version = "0.10", optional = true }
sha3 = { version = "0.10", optional = true }
secp256k1 = { version = "0.22", optional = true, features = ["lowmemory"] }
ed25519-zebra = { version = "2.2", optional = true }
quickcheck = {version = "1", optional = true }
getrandom = { version = "0.2", features = ["custom"], optional = true }

[dependencies.concordium-contracts-common]
path = "../concordium-rust-sdk/concordium-base/smart-contracts/contracts-common/concordium-contracts-common"
version = "9.0"
default-features = false
features = ["smart-contract"]

[features]
default = ["std"]
std = ["concordium-contracts-common/std"]
wasm-test = ["concordium-contracts-common/wasm-test"]
# Own internal wasm-tests leak out to the smart contracts using this library,
# so a separate feature 'internal-wasm-test' is introduced for these.
internal-wasm-test = ["wasm-test", "concordium-quickcheck"]
build-schema = ["concordium-contracts-common/build-schema"]
crypto-primitives = ["sha2", "sha3", "secp256k1", "ed25519-zebra"]
concordium-quickcheck = ["getrandom", "quickcheck", "concordium-contracts-common/concordium-quickcheck", "std"]
debug = []
bump_alloc = []
# p7 enables support for functionality introduced in protocol version 7.
p7 = []

[lib]
# cdylib is needed below to compile into a wasm module with internal unit tests.
crate-type = ["cdylib", "rlib"]

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"

[dev-dependencies]
trybuild = "1.0"
# Don't unwind on panics, just trap.
# panic = "abort"



[package.metadata.docs.rs]
# This sets the default target to `wasm32-unknown-unknown` and only builds that
# target on docs.rs. This is useful because the some parts of documentation only
# exist on that platform.
targets = ["wasm32-unknown-unknown"]
