on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

name: Clippy & fmt

jobs:
  rustfmt:
    name: Format
    runs-on: ubuntu-latest
    strategy:
      matrix:
        crates:
          - concordium-std/Cargo.toml
          - concordium-std-derive/Cargo.toml
          - examples/auction/Cargo.toml
          - examples/cis1-multi/Cargo.toml
          - examples/cis1-nft/Cargo.toml
          - examples/cis1-single-nft/Cargo.toml
          - examples/cis1-wccd/Cargo.toml
          - examples/erc721/Cargo.toml
          - examples/listing-cis1/Cargo.toml
          - examples/memo/Cargo.toml
          - examples/piggy-bank/part1/Cargo.toml
          - examples/piggy-bank/part2/Cargo.toml
          - examples/two-step-transfer/Cargo.toml

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install nightly toolchain with rustfmt available
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2021-06-09
          override: true
          components: rustfmt

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path=${{ matrix.crates }} --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    needs: rustfmt
    strategy:
      matrix:
        target:
          - wasm32-unknown-unknown
          - x86_64-unknown-linux-gnu

        lib-crates:
          - concordium-std/Cargo.toml
          - concordium-std-derive/Cargo.toml

        features:
          -
          - build-schema

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install toolchain with clippy available
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.53
          target: ${{ matrix.target }}
          override: true
          components: clippy

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path ${{ matrix.lib-crates }} --target=${{ matrix.target }} --features=${{ matrix.features }} -- -D warnings

  clippy-wasm32-only:
    name: Clippy Wasm32
    runs-on: ubuntu-latest
    needs: rustfmt
    strategy:
      matrix:
        target:
          - wasm32-unknown-unknown

        lib-crates:
          - concordium-std/Cargo.toml
          - concordium-std-derive/Cargo.toml

        features:
          - wasm-test
          - wasm-test,build-schema

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install toolchain with clippy available
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.53
          target: ${{ matrix.target }}
          override: true
          components: clippy

      - name: Run cargo clippy, but only for wasm32 target
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path ${{ matrix.lib-crates }} --target=${{ matrix.target }} --features=${{ matrix.features }} -- -D warnings

  check-std-no-std:
    name: Build on nightly,
    runs-on: ubuntu-latest
    needs: rustfmt
    strategy:
      matrix:
        target:
          - wasm32-unknown-unknown

        crates:
          - concordium-std/Cargo.toml

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install nightly toolchain with check available
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          target: ${{ matrix.target }}
          override: true

      - name: Run cargo check with no-std
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --manifest-path ${{ matrix.crates }} --target=${{ matrix.target }} --no-default-features

  check-no-std-examples:
    name: Build on nightly,
    runs-on: ubuntu-latest
    needs: rustfmt
    strategy:
      matrix:
        target:
          - wasm32-unknown-unknown

        crates:
          - examples/two-step-transfer/Cargo.toml
          - examples/erc721/Cargo.toml
          - examples/cis1-wccd/Cargo.toml
          - examples/cis1-nft/Cargo.toml
          - examples/cis1-multi/Cargo.toml

        features:
          -
          - concordium-std/build-schema

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install nightly toolchain with check available
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          target: ${{ matrix.target }}
          override: true

      - name: Run cargo check with no-std
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --manifest-path ${{ matrix.crates }} --target=${{ matrix.target }} --no-default-features --features=${{ matrix.features }}


  clippy-schema:
    name: Clippy on examples
    runs-on: ubuntu-latest
    needs: rustfmt
    strategy:
      matrix:
        target:
          - wasm32-unknown-unknown

        crates:
          - examples/auction/Cargo.toml
          - examples/cis1-multi/Cargo.toml
          - examples/cis1-nft/Cargo.toml
          - examples/cis1-single-nft/Cargo.toml
          - examples/cis1-wccd/Cargo.toml
          - examples/erc721/Cargo.toml
          - examples/listing-cis1/Cargo.toml
          - examples/memo/Cargo.toml
          - examples/piggy-bank/part1/Cargo.toml
          - examples/piggy-bank/part2/Cargo.toml
          - examples/two-step-transfer/Cargo.toml

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install toolchain with clippy available
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.53
          target: ${{ matrix.target }}
          override: true
          components: clippy

      - name: Run cargo clippy with schema and tests
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path ${{ matrix.crates }} --target=${{ matrix.target }} --features concordium-std/build-schema --features concordium-std/wasm-test -- -D warnings

  test:
    name: Test the library
    runs-on: ubuntu-latest
    needs: [rustfmt, clippy]
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu

        lib-crates:
          - concordium-std/Cargo.toml

        features:
          -

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.53
          target: ${{ matrix.target }}
          override: true

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          # only run the library tests, no doc tests
          args: --manifest-path ${{ matrix.lib-crates }} --target=${{ matrix.target }} --features=${{ matrix.features }} --lib

  test-examples:
    name: Test examples
    runs-on: ubuntu-latest
    needs: [rustfmt, clippy-schema]
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu

        crates:
          - examples/auction/Cargo.toml
          - examples/cis1-multi/Cargo.toml
          - examples/cis1-nft/Cargo.toml
          - examples/cis1-single-nft/Cargo.toml
          - examples/cis1-wccd/Cargo.toml
          - examples/erc721/Cargo.toml
          - examples/listing-cis1/Cargo.toml
          - examples/memo/Cargo.toml
          - examples/piggy-bank/part1/Cargo.toml
          - examples/piggy-bank/part2/Cargo.toml
          - examples/two-step-transfer/Cargo.toml

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.53
          target: ${{ matrix.target }}
          override: true

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          # only run the library tests, no doc tests
          args: --manifest-path ${{ matrix.crates }} --target=${{ matrix.target }} --lib
